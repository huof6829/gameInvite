// Code generated by goctl. DO NOT EDIT!

package user_invite

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheSavvyGameingUserInviteIdPrefix              = "cache:savvyGameing:userInvite:id:"
	cacheSavvyGameingUserInviteParentIdChildIdPrefix = "cache:savvyGameing:userInvite:parentId:childId:"
)

type (
	userInviteModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserInvite) error

		FindOne(ctx context.Context, id int64) (*UserInvite, error)
		FindOneByParentIdChildId(ctx context.Context, parentId int64, childId int64) (*UserInvite, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserInvite) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserInviteModel struct {
		gormc.CachedConn
		table string
	}

	UserInvite struct {
		Id                         int64     `gorm:"column:id"`
		ParentId                   int64     `gorm:"column:parent_id"`
		ChildId                    int64     `gorm:"column:child_id"`
		Level                      int64     `gorm:"column:level"`                         // 1-直接,2-间接
		InviteCreditDirectParent   int64     `gorm:"column:invite_credit_direct_parent"`   // 直接邀请积分
		InviteCreditDirectChild    int64     `gorm:"column:invite_credit_direct_child"`    // 间接邀请积分
		InviteCreditIndirectParent int64     `gorm:"column:invite_credit_indirect_parent"` // 分成邀请积分,直接10%,间接5%
		InviteCreditIndirectChild  int64     `gorm:"column:invite_credit_indirect_child"`  // 分成邀请积分，直接邀请填入，间接邀请不填
		InviteCodeParent           string    `gorm:"column:invite_code_parent"`            // 系统邀请码
		CreatedAt                  time.Time `gorm:"column:created_at"`
		UpdatedAt                  time.Time `gorm:"column:updated_at"`
	}
)

func (UserInvite) TableName() string {
	return "`user_invite`"
}

func newUserInviteModel(conn *gorm.DB, c cache.CacheConf) *defaultUserInviteModel {
	return &defaultUserInviteModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_invite`",
	}
}

func (m *defaultUserInviteModel) Insert(ctx context.Context, tx *gorm.DB, data *UserInvite) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserInviteModel) FindOne(ctx context.Context, id int64) (*UserInvite, error) {
	savvyGameingUserInviteIdKey := fmt.Sprintf("%s%v", cacheSavvyGameingUserInviteIdPrefix, id)
	var resp UserInvite
	err := m.QueryCtx(ctx, &resp, savvyGameingUserInviteIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserInvite{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInviteModel) FindOneByParentIdChildId(ctx context.Context, parentId int64, childId int64) (*UserInvite, error) {
	savvyGameingUserInviteParentIdChildIdKey := fmt.Sprintf("%s%v:%v", cacheSavvyGameingUserInviteParentIdChildIdPrefix, parentId, childId)
	var resp UserInvite
	err := m.QueryRowIndexCtx(ctx, &resp, savvyGameingUserInviteParentIdChildIdKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&UserInvite{}).Where("`parent_id` = ? and `child_id` = ?", parentId, childId).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInviteModel) Update(ctx context.Context, tx *gorm.DB, data *UserInvite) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	clearKeys := append(m.getCacheKeys(old), m.getNewModelNeedReloadCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}

func (m *defaultUserInviteModel) getCacheKeys(data *UserInvite) []string {
	if data == nil {
		return []string{}
	}
	savvyGameingUserInviteIdKey := fmt.Sprintf("%s%v", cacheSavvyGameingUserInviteIdPrefix, data.Id)
	savvyGameingUserInviteParentIdChildIdKey := fmt.Sprintf("%s%v:%v", cacheSavvyGameingUserInviteParentIdChildIdPrefix, data.ParentId, data.ChildId)
	cacheKeys := []string{
		savvyGameingUserInviteIdKey, savvyGameingUserInviteParentIdChildIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserInviteModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserInvite{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserInviteModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserInviteModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSavvyGameingUserInviteIdPrefix, primary)
}

func (m *defaultUserInviteModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserInvite{}).Where("`id` = ?", primary).Take(v).Error
}
