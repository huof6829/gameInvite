// Code generated by goctl. DO NOT EDIT!

package sys_invite

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheSavvyGameingSysInviteIdPrefix         = "cache:savvyGameing:sysInvite:id:"
	cacheSavvyGameingSysInviteInviteCodePrefix = "cache:savvyGameing:sysInvite:inviteCode:"
)

type (
	sysInviteModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *SysInvite) error

		FindOne(ctx context.Context, id int64) (*SysInvite, error)
		FindOneByInviteCode(ctx context.Context, inviteCode string) (*SysInvite, error)
		Update(ctx context.Context, tx *gorm.DB, data *SysInvite) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultSysInviteModel struct {
		gormc.CachedConn
		table string
	}

	SysInvite struct {
		Id         int64     `gorm:"column:id"`
		InviteCode string    `gorm:"column:invite_code"`
		CreatedAt  time.Time `gorm:"column:created_at"`
		UpdatedAt  time.Time `gorm:"column:updated_at"`
	}
)

func (SysInvite) TableName() string {
	return "`sys_invite`"
}

func newSysInviteModel(conn *gorm.DB, c cache.CacheConf) *defaultSysInviteModel {
	return &defaultSysInviteModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`sys_invite`",
	}
}

func (m *defaultSysInviteModel) Insert(ctx context.Context, tx *gorm.DB, data *SysInvite) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultSysInviteModel) FindOne(ctx context.Context, id int64) (*SysInvite, error) {
	savvyGameingSysInviteIdKey := fmt.Sprintf("%s%v", cacheSavvyGameingSysInviteIdPrefix, id)
	var resp SysInvite
	err := m.QueryCtx(ctx, &resp, savvyGameingSysInviteIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&SysInvite{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysInviteModel) FindOneByInviteCode(ctx context.Context, inviteCode string) (*SysInvite, error) {
	savvyGameingSysInviteInviteCodeKey := fmt.Sprintf("%s%v", cacheSavvyGameingSysInviteInviteCodePrefix, inviteCode)
	var resp SysInvite
	err := m.QueryRowIndexCtx(ctx, &resp, savvyGameingSysInviteInviteCodeKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&SysInvite{}).Where("`invite_code` = ?", inviteCode).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysInviteModel) Update(ctx context.Context, tx *gorm.DB, data *SysInvite) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	clearKeys := append(m.getCacheKeys(old), m.getNewModelNeedReloadCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}

func (m *defaultSysInviteModel) getCacheKeys(data *SysInvite) []string {
	if data == nil {
		return []string{}
	}
	savvyGameingSysInviteIdKey := fmt.Sprintf("%s%v", cacheSavvyGameingSysInviteIdPrefix, data.Id)
	savvyGameingSysInviteInviteCodeKey := fmt.Sprintf("%s%v", cacheSavvyGameingSysInviteInviteCodePrefix, data.InviteCode)
	cacheKeys := []string{
		savvyGameingSysInviteIdKey, savvyGameingSysInviteInviteCodeKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultSysInviteModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&SysInvite{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultSysInviteModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultSysInviteModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSavvyGameingSysInviteIdPrefix, primary)
}

func (m *defaultSysInviteModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&SysInvite{}).Where("`id` = ?", primary).Take(v).Error
}
