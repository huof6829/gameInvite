// Code generated by goctl. DO NOT EDIT!

package user_invite_count

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheSavvyGameingUserInviteCountIdPrefix         = "cache:savvyGameing:userInviteCount:id:"
	cacheSavvyGameingUserInviteCountInviteCodePrefix = "cache:savvyGameing:userInviteCount:inviteCode:"
	cacheSavvyGameingUserInviteCountUserIdPrefix     = "cache:savvyGameing:userInviteCount:userId:"
)

type (
	userInviteCountModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserInviteCount) error

		FindOne(ctx context.Context, id int64) (*UserInviteCount, error)
		FindOneByInviteCode(ctx context.Context, inviteCode string) (*UserInviteCount, error)
		FindOneByUserId(ctx context.Context, userId int64) (*UserInviteCount, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserInviteCount) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserInviteCountModel struct {
		gormc.CachedConn
		table string
	}

	UserInviteCount struct {
		Id           int64     `gorm:"column:id"`
		UserId       int64     `gorm:"column:user_id"`
		InviteCode   string    `gorm:"column:invite_code"`
		TotalCredit  int64     `gorm:"column:total_credit"`  // 邀请总分
		TotalCount   int64     `gorm:"column:total_count"`   // 要去总数
		SuccessCount int64     `gorm:"column:success_count"` // 成功邀请总数
		CreatedAt    time.Time `gorm:"column:created_at"`
		UpdatedAt    time.Time `gorm:"column:updated_at"`
	}
)

func (UserInviteCount) TableName() string {
	return "`user_invite_count`"
}

func newUserInviteCountModel(conn *gorm.DB, c cache.CacheConf) *defaultUserInviteCountModel {
	return &defaultUserInviteCountModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_invite_count`",
	}
}

func (m *defaultUserInviteCountModel) Insert(ctx context.Context, tx *gorm.DB, data *UserInviteCount) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserInviteCountModel) FindOne(ctx context.Context, id int64) (*UserInviteCount, error) {
	savvyGameingUserInviteCountIdKey := fmt.Sprintf("%s%v", cacheSavvyGameingUserInviteCountIdPrefix, id)
	var resp UserInviteCount
	err := m.QueryCtx(ctx, &resp, savvyGameingUserInviteCountIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserInviteCount{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInviteCountModel) FindOneByInviteCode(ctx context.Context, inviteCode string) (*UserInviteCount, error) {
	savvyGameingUserInviteCountInviteCodeKey := fmt.Sprintf("%s%v", cacheSavvyGameingUserInviteCountInviteCodePrefix, inviteCode)
	var resp UserInviteCount
	err := m.QueryRowIndexCtx(ctx, &resp, savvyGameingUserInviteCountInviteCodeKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&UserInviteCount{}).Where("`invite_code` = ?", inviteCode).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInviteCountModel) FindOneByUserId(ctx context.Context, userId int64) (*UserInviteCount, error) {
	savvyGameingUserInviteCountUserIdKey := fmt.Sprintf("%s%v", cacheSavvyGameingUserInviteCountUserIdPrefix, userId)
	var resp UserInviteCount
	err := m.QueryRowIndexCtx(ctx, &resp, savvyGameingUserInviteCountUserIdKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&UserInviteCount{}).Where("`user_id` = ?", userId).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInviteCountModel) Update(ctx context.Context, tx *gorm.DB, data *UserInviteCount) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	clearKeys := append(m.getCacheKeys(old), m.getNewModelNeedReloadCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}

func (m *defaultUserInviteCountModel) getCacheKeys(data *UserInviteCount) []string {
	if data == nil {
		return []string{}
	}
	savvyGameingUserInviteCountIdKey := fmt.Sprintf("%s%v", cacheSavvyGameingUserInviteCountIdPrefix, data.Id)
	savvyGameingUserInviteCountInviteCodeKey := fmt.Sprintf("%s%v", cacheSavvyGameingUserInviteCountInviteCodePrefix, data.InviteCode)
	savvyGameingUserInviteCountUserIdKey := fmt.Sprintf("%s%v", cacheSavvyGameingUserInviteCountUserIdPrefix, data.UserId)
	cacheKeys := []string{
		savvyGameingUserInviteCountIdKey, savvyGameingUserInviteCountInviteCodeKey, savvyGameingUserInviteCountUserIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserInviteCountModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserInviteCount{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserInviteCountModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserInviteCountModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSavvyGameingUserInviteCountIdPrefix, primary)
}

func (m *defaultUserInviteCountModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserInviteCount{}).Where("`id` = ?", primary).Take(v).Error
}
